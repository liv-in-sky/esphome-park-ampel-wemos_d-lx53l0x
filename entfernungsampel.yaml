substitutions:
  scale_max: "0.8"          # Start Enfernungsmesser in Meter für Grün
  scale_min: "0.2"          # Start Enfernungsmesser in Meter für Rot
  scale_of_dist_sensor: "1.5"
  timeout_light: "30"       # Dauer bis Lichter ausgehen - in sek
  ws2812_brightness: "50%"  # Helligkeit der WS2812 - Vorsicht wenn keine externe Stromversorgung !!!! sondern Pin's genutzt werden
  topic_leds: "entfernungsampel/chatgpt/color/leds"
  topic_dist: "entfernungsampel/chatgpt/color/dist"
  topic_neo_status: entfernungsampel/chatgpt/neo/status


esphome:
  name: entfernungsampel
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: "yyyyyyyyyyyyy"
  password: "xxxxxxxxxxxxx"
  use_address: 192.168.178.64

# enable logging
logger:
 # level: INFO    # log abschalten/minmieren
  
# enable Home Assistant API
api:

# enable OTA updates
ota:

mqtt:
  broker: 192.168.178.59
  port: 1506
  discovery: false      # damit nicht dauernd Sensor Werte übertragen werden
  
i2c:
  sda: D2
  scl: D1
  scan: True

output:
  - platform: gpio
    pin: D3
    id: red_led
  - platform: gpio
    pin: D4
    id: green_led
  - platform: gpio
    pin: D5
    id: yellow_led

globals:
  - id: cur_led
    type: std::string
    initial_value: '"off"'
  - id: count
    type: int
    initial_value: '0'
  - id: old
    type: float
    initial_value: '10.0'
  - id: delta
    type: float
    initial_value: '0.0'

light:
  - platform: neopixelbus
    type: GRB
    id: voyant_led
    variant: WS2812X
    pin: GPIO3
    num_leds: 6
    name: "NeoPixel Light"
    default_transition_length: 0.5s
    availability:
      topic: ${topic_neo_status}
      payload_available: online
      payload_not_available: offline
 #   state_topic: entfernungsampel/chatgpt/neo/custom_state_topic
  #  command_topic: entfernungsampel/chatgpt/neo/custom_command_topic
  #  command_retain: false

sensor:
  - platform: vl53l0x
    address: '0x29'
    name: "SR04 Sensor"
    id: sr04_sensor
    long_range: true
    internal: true             # damit nicht dauernd Sensor Werte übertragen werden aber intern kommen
    update_interval: 1.0s
    unit_of_measurement: "m"
    filters:
      - lambda: |-
          if (isnan(x)) {
            return ${scale_of_dist_sensor};
          } else {
            return x;
          }

    on_value:
        then:

          - globals.set:
              id: delta
              value: !lambda |-
                           return std::abs(id(sr04_sensor).state - id(old));
          - globals.set:
              id: old
              value: !lambda |-
                           return x;
          - logger.log:
              format: "Setting temp bar width to %s. and %d and %d and %d un der delta wert: %.2f und der old wert: %.2f"
              args: ['id(cur_led).c_str()','strcmp(id(cur_led).c_str(), "green")','strcmp(id(cur_led).c_str(), "yellow")','strcmp(id(cur_led).c_str(), "red")','id(delta)','id(old)']

          - if:
              condition:
                - lambda: 'return (strcmp(id(cur_led).c_str(), "green")<0 || strcmp(id(cur_led).c_str(), "green")>0 ) && (id(sr04_sensor).state > ${scale_max});' 
              then:
                - globals.set:
                    id: count
                    value: id(count)=0
                - globals.set:
                    id: cur_led
                    value: '"green"'
                - output.turn_off: yellow_led
                - output.turn_on: green_led
                - output.turn_off: red_led

                - mqtt.publish:
                     topic: ${topic_leds}
                     payload: "green"
                - mqtt.publish:
                     topic: ${topic_dist}
                     payload: !lambda |-
                                return str_snprintf("%f", 32, id(sr04_sensor).state);
                - light.turn_on:
                    id: voyant_led
                    brightness: ${ws2812_brightness}
                    red: 0%
                    green: 100%
                    blue: 0%
              else:
                if:
                  condition:
                    - lambda: 'return (strcmp(id(cur_led).c_str(), "green")==0);'
                  then:
                    - lambda: |-
                              id(count) += 1;
                    - logger.log:
                        format: "The counter  reports value %d in green"
                        args: [ 'id(count)' ]
                    - if:
                        condition:
                          - lambda: "return id(count) > ${timeout_light};"
                        then:
                          - light.turn_off:
                              id: voyant_led
                          - output.turn_off: green_led
                          - logger.log:
                              format: "bin in schleife"
                          - globals.set:
                              id: count
                              value: !lambda |-
                                            return ${timeout_light}+1;
          - if:
              condition:
                and:
                 - lambda: "return (id(sr04_sensor).state > ${scale_min}) && (id(sr04_sensor).state <= ${scale_max});"
                 - lambda: 'return (strcmp(id(cur_led).c_str(), "yellow")<0 || strcmp(id(cur_led).c_str(), "yellow")>0 );'
              then:
                - globals.set:
                    id: count
                    value: id(count)=0
                - globals.set:
                    id: cur_led
                    value: '"yellow"'
                - output.turn_on: yellow_led
                - output.turn_off: green_led
                - output.turn_off: red_led
                - mqtt.publish:
                     topic: ${topic_leds}
                     payload: "yellow"
                - mqtt.publish:
                     topic: ${topic_dist}
                     payload: !lambda |-
                                return str_snprintf("%f", 32, id(sr04_sensor).state);
                - light.turn_on:
                    id: voyant_led
                    brightness: ${ws2812_brightness}
                    red: 100%
                    green: 100%
                    blue: 0%
              else:
                if:
                  condition:
                    - lambda: 'return (strcmp(id(cur_led).c_str(), "yellow")==0);'
                  then:
                    - lambda: |-
                              id(count) += 1;
                    - logger.log:
                        format: "The counter  reports value %d in yellow"
                        args: [ 'id(count)' ]
                    - if:
                        condition:
                          - lambda: "return id(count) > ${timeout_light};"
                        then:
                          - light.turn_off:
                              id: voyant_led
                          - output.turn_off: yellow_led
                          - logger.log:
                              format: "bin in schleife"
                          - globals.set:
                              id: count
                              value: !lambda |-
                                            return ${timeout_light}+1;
          - if:
              condition:
                 and:
                  - lambda: "return id(sr04_sensor).state <= ${scale_min};"
                  - lambda: 'return strcmp(id(cur_led).c_str(), "red")<0 || strcmp(id(cur_led).c_str(), "red")>0 ;'
              then:
                - globals.set:
                    id: count
                    value: id(count)=0
                - globals.set:
                    id: cur_led
                    value: '"red"'
                - output.turn_off: yellow_led
                - output.turn_off: green_led
                - output.turn_on: red_led
                - mqtt.publish:
                     topic: ${topic_leds}
                     payload: "red"
                - mqtt.publish:
                     topic: ${topic_dist}
                     payload: !lambda |-
                                return str_snprintf("%f", 32, id(sr04_sensor).state);
                - light.turn_on:
                    id: voyant_led
                    brightness: ${ws2812_brightness}
                    red: 100%
                    green: 0%
                    blue: 0%
              else:
                if:
                  condition:
                    - lambda: 'return (strcmp(id(cur_led).c_str(), "red")==0);'
                  then:
                    - lambda: |-
                              id(count) += 1;
                    - logger.log:
                        format: "The counter  reports value %d in red"
                        args: [ 'id(count)' ]
                    - if:
                        condition:
                          - lambda: "return id(count) > ${timeout_light};" 
                        then:
                          - light.turn_off:
                              id: voyant_led
                          - output.turn_off: red_led
                          - logger.log:
                              format: "bin in schleife"
                          - globals.set:
                              id: count
                              value: !lambda |-
                                            return ${timeout_light}+1;
          - if:
              condition:
                - lambda: "return id(delta)>=0.015;"
              then:
                - logger.log:
                    format: "gesetzt durch delta wegen %.3f"
                    args: [id(delta)]
                - globals.set:
                              id: count
                              value: id(count)=1
                - light.turn_on:
                    id: voyant_led
                - if:
                   condition:
                      - lambda: 'return (strcmp(id(cur_led).c_str(), "red")==0);'
                   then:
                     - output.turn_on: red_led
                - if:
                   condition:
                      - lambda: 'return (strcmp(id(cur_led).c_str(), "yellow")==0);'
                   then:
                     - output.turn_on: yellow_led
                - if:
                   condition:
                      - lambda: 'return (strcmp(id(cur_led).c_str(), "green")==0);'
                   then:
                     - output.turn_on: green_led

          - if:
              condition:
                - lambda: "return id(delta)>=0.02;"
              then:
                - mqtt.publish:
                     topic: ${topic_dist}
                     payload: !lambda |-
                                return str_snprintf("%f", 32, id(sr04_sensor).state);
